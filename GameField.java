package JavaSeaBattle;


import java.util.Scanner;

public class GameField {
    private final int FIELD_LENGTH = 12;
    private final int FIELD_WIDTH = 12;

    // –ò–º—è –∏–≥—Ä–æ–∫–∞
    private final String playerName;

    // –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–∞–±–ª–µ–π —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ, –∫–æ–≥–¥–∞ —Å—á–µ—Ç–∏–∫ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ 20 - –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
    int shipCount = 0;

    // –ù–∞—à–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    private String [][]field_player = new String[FIELD_LENGTH][FIELD_WIDTH];

    private final Scanner scanner = new Scanner(System.in);


    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    public GameField(String playerName) {
        this.playerName = playerName;
        fieldOfMas(field_player);
    }



    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø–æ–ª—è –ø—É—Å—Ç—ã–º —Å–∏–º–≤–æ–ª–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NullPointerException
    public static void fieldOfMas(String [][] mas) {
        for (int i = 0; i < mas.length; i++) {
            for (int j = 0; j < mas[0].length; j++) {
                mas[i][j] = " ";
            }
        }
    }


// –í—ã–≤–æ–¥ –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—å
    public  void printField(){
        for (int i = 1; i < field_player.length-1; i++) {
            System.out.println();
            System.out.print(i + " ");
            for (int j = 1; j < field_player[0].length-1; j++) {
                System.out.print(field_player[i][j].equals(" ") ? "\uD83D\uDFE6" : field_player[i][j]);
            }
        }
    }


// –ó–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–Ω—Å–æ–ª–∏,
// –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å —É—Å–ª–æ–≤–∏—é
    public void rasstanovka(){
        System.out.println("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –ø–æ–ª–µ " + this.getPlayerName());
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y,x)");
        String line = scanner.nextLine().trim();
       while (!placementOfShip(line,1)) {
           System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
           line = scanner.nextLine().trim();
       }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y,x)");
       line = scanner.nextLine().trim();
        while (!placementOfShip(line,1)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã —Ç—Ä–µ—Ç—å–µ–≥–æ –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y,x)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,1)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y,x)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,1)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –¥–≤—É—Ö–ø–∞–ª–æ–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y1,x1;y2,x2)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,2)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –¥–≤—É—Ö–ø–∞–ª–æ–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y1,x1;y2,x2)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,2)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã —Ç—Ä–µ—Ç—å–µ–≥–æ –¥–≤—É—Ö–ø–∞–ª–æ–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y1,x1;y2,x2)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,2)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y1,x1;y2,x2;y3,x3)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,3)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y1,x1;y2,x2;y3,x3)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,3)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã —á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è(—Ñ–æ—Ä–º–∞—Ç: y1,x1;y2,x2;y3,x3;y4,x4)");
        line = scanner.nextLine().trim();
        while (!placementOfShip(line,4)) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ");
            line = scanner.nextLine().trim();
        }
     }


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è,
// –µ—Å–ª–∏ –≤—Å–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ, –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –ø–æ–ª–µ
    public boolean placementOfShip(String line,int size) {
    if(line.length() == 0) {
        return false;
    }
         try {
             String [] lineSplitCount = line.split(";");
             switch (size) {
                 case 1:
                     // –î–ª—è –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å
                     if(Utils.singleShip(line) && Utils.validation(field_player,line,1)) {
                         String[] lineSplitSize = line.split(",");
                         /*
                         –ù–∞–Ω–æ—Å–∏—Ç—Å—è –∫–æ—Ä–∞–±–ª—å –Ω–∞ –º–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –≤–µ–∑–¥–µ –Ω–∞ +1 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
                         –ø–æ–ª–µ –≤ –∑–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç, —É–∫–∞–∑—ã–≤–∞—è –Ω–∞ –µ–≥–æ –û—Ä–µ–æ–ª
                          */
                         field_player[Integer.parseInt(lineSplitSize[0])][Integer.parseInt(lineSplitSize[1])] = "üõ•Ô∏è";
                         field_player[Integer.parseInt(lineSplitSize[0])][Integer.parseInt(lineSplitSize[1]) + 1] = "\uD83D\uDFE9";
                         field_player[Integer.parseInt(lineSplitSize[0]) + 1][Integer.parseInt(lineSplitSize[1])] = "\uD83D\uDFE9";
                         field_player[Integer.parseInt(lineSplitSize[0])][Integer.parseInt(lineSplitSize[1]) - 1] = "\uD83D\uDFE9";
                         field_player[Integer.parseInt(lineSplitSize[0]) - 1][Integer.parseInt(lineSplitSize[1])] = "\uD83D\uDFE9";
                         field_player[Integer.parseInt(lineSplitSize[0]) + 1][Integer.parseInt(lineSplitSize[1]) + 1] = "\uD83D\uDFE9";
                         field_player[Integer.parseInt(lineSplitSize[0]) + 1][Integer.parseInt(lineSplitSize[1]) - 1] = "\uD83D\uDFE9";
                         field_player[Integer.parseInt(lineSplitSize[0]) - 1][Integer.parseInt(lineSplitSize[1]) + 1] = "\uD83D\uDFE9";
                         field_player[Integer.parseInt(lineSplitSize[0]) - 1][Integer.parseInt(lineSplitSize[1]) - 1] = "\uD83D\uDFE9";
                         break;
                     } else {
                         return false;
                     }
                 case 2:
                     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—Ö–ø–∞–ª–æ–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                     if(Utils.doubleShip(line) && Utils.validShip(2) && Utils.validation(field_player,line,2)) {
                         // –í—ã–∑–æ–≤ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –¥–≤—É—Ö–ø–∞–ª–æ–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ
                         Utils.fillOfField(lineSplitCount,field_player);
                         break;
                     }
                     else {
                         return false;
                     }
                 case 3:
                     // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                     if(Utils.threeShip(line) && Utils.validShip(3) && Utils.validation(field_player,line,3)) {
                         // –í—ã–∑–æ–≤ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ
                         Utils.fillOfField(lineSplitCount,field_player);
                         break;
                     } else {
                         return false;
                     }
                 case 4:
                     // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                     if(Utils.fourShip(line) && Utils.validShip(4) && Utils.validation(field_player,line,4)) {
                         // –í—ã–∑–æ–≤ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ
                         Utils.fillOfField(lineSplitCount,field_player);
                         break;
                     }
                     else {
                         return false;
                     }
                 default: return false;
             }
         } catch (Exception e) {
             /* –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ split –º–µ—Ç–æ–¥–µ, —Ç–æ –µ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É,
                –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è false –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Å–æ–ª–∏
             */

             return false;
         }
         return true;
    }

// –ì–µ—Ç—Ç–µ—Ä –∏–º–µ–Ω–∏
    public String getPlayerName() {
        return playerName;
    }


    // –ì–µ—Ç—Ç–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    public String[][] getField_player() {
        return field_player;
    }
}




