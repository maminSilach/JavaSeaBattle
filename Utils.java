package JavaSeaBattle;



import java.util.Arrays;
import java.util.Objects;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å —Å –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
public class Utils {
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    private static final int MIN = 0;
    private static final int MAX = 10;

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π
     private static int x1,y1,x2,y2,x3,y3,x4,y4;

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–¥ –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
public static boolean singleShip(String line) {
    try {
String [] line2 = line.split(",");
y1 = Integer.parseInt(line2[0]);
x1 = Integer.parseInt(line2[1]);

if(line2.length != 2) {
    return false;
}
if(x1 > MAX || x1 < MIN) {
    System.err.println("–ü–µ—Ä–≤–∞—è –∫–æ–æ—Ä–¥–∏–∞–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –º–µ–Ω—å—à–µ –¥–µ—Å—è—Ç–∏");
    return false;
}
if(y1 > MAX || y1 < MIN) {
    System.err.println("–í—Ç–æ—Ä–∞—è –∫–æ–æ—Ä–¥–∏–∞–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –º–µ–Ω—å—à–µ –¥–µ—Å—è—Ç–∏");
    return false;
}


    } catch (NumberFormatException e) {
        return false;
    }
    return true;
}



    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–¥ –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
    public static boolean doubleShip(String line) {

        String[] lineSplitSize = line.split(";");
       if(lineSplitSize.length != 2) {
           return false;
       }
        for (String s : lineSplitSize) {
            String[] lineSplitSize2 = s.split(",");
            for (String value : lineSplitSize2) {
                if (Integer.parseInt(value) <= MIN || Integer.parseInt(value) > MAX) {
                    System.err.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏ –Ω–µ –±–æ–ª—å—à–µ –¥–µ—Å—è—Ç–∏!");
                    return false;
                }
            }
        }
        line = line.replace(";",",");
        String []lineSplitSize3 = line.split(",");
        y1 = Integer.parseInt(lineSplitSize3[0]);x1 = Integer.parseInt(lineSplitSize3[1]);
        y2 = Integer.parseInt(lineSplitSize3[2]);x2 = Integer.parseInt(lineSplitSize3[3]);
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É, –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        if(y1 > y2 || x1 > x2) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É ");
            return false;
        }
        return true;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–¥ —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
    public static boolean threeShip(String line) {
        String[] lineSplitSize = line.split(";");
        if(lineSplitSize.length != 3) {
            return false;
        }
        for (String s : lineSplitSize) {
            String[] lineSplitSize2 = s.split(",");
            for (String value : lineSplitSize2) {
                if (Integer.parseInt(value) <= MIN || Integer.parseInt(value) > MAX) {
                    System.err.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏ –Ω–µ –±–æ–ª—å—à–µ –¥–µ—Å—è—Ç–∏!");
                    return false;
                }
            }
        }
        line = line.replace(";",",");
        String []lineSplitSize3 = line.split(",");
        // –ö–∞–∂–¥—ã–π —Ä–∞–∑ –≤ –Ω–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        y1 = Integer.parseInt(lineSplitSize3[0]);x1 = Integer.parseInt(lineSplitSize3[1]);
        y2 = Integer.parseInt(lineSplitSize3[2]);x2 = Integer.parseInt(lineSplitSize3[3]);
        y3 = Integer.parseInt(lineSplitSize3[4]);x3 = Integer.parseInt(lineSplitSize3[5]);
        if(y1 > y2 || x1 > x2 || y1 > y3 || x1 > x3) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É ");
            return false;
        }
        return true;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–¥ —á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
    public static boolean fourShip(String line) {
        String[] lineSplitSize = line.split(";");
        if(lineSplitSize.length != 4) {
            return false;
        }
        for (String s : lineSplitSize) {
            String[] lineSplitSize2 = s.split(",");
            for (String value : lineSplitSize2) {
                if (Integer.parseInt(value) <= MIN || Integer.parseInt(value) > MAX) {
                    System.err.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏ –Ω–µ –±–æ–ª—å—à–µ –¥–µ—Å—è—Ç–∏!");
                    return false;
                }
            }
        }
        line = line.replace(";",",");
        String []lineSplitSize3 = line.split(",");

        // –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        y1 = Integer.parseInt(lineSplitSize3[0]);x1 = Integer.parseInt(lineSplitSize3[1]);
        y2 = Integer.parseInt(lineSplitSize3[2]);x2 = Integer.parseInt(lineSplitSize3[3]);
        y3 = Integer.parseInt(lineSplitSize3[4]);x3 = Integer.parseInt(lineSplitSize3[5]);
        y4 = Integer.parseInt(lineSplitSize3[6]);x4 = Integer.parseInt(lineSplitSize3[7]);
        if(y1 > y2 || x1 > x2 || y1 > y3 || x1 > x3 || y1 > y4 || x1 > x4  || y2 > y3 || x2 > x3|| y2> y4 || x2>x4) {
            System.err.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–∞–Ω—Ç—ã –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É ");
            return false;
        }

        return true;
    }

    public static void fillOfField(String [] lineSplitCount, String [][]field_player){
        String line = Arrays.toString(lineSplitCount);
        int count = 0;

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω—É–∂–Ω—ã–π –Ω–∞–º –≤–∏–¥ –¥–ª—è split –º–µ—Ç–æ–¥–∞
        line =  line.replace("[","");
        line = line.replace("]","");
        line = line.replace(";",",");
        line = line.replace(" ","");
       String [] lineSplit = line.split(",");
        String[] lineSplitSize2 = new String[]{};
        int x = Integer.parseInt(lineSplit[0]);
        int x2 = Integer.parseInt(lineSplit[2]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä–∞–±–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ –∂–µ –≥–æ—Ä–∏–∑–æ–Ω–∞—Ç–ª—å–Ω—ã–º
        if(x - x2 == 1 || x2 - x == 1) {
            for (String s : lineSplitCount) {

                // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –∏ –µ–≥–æ –û—Ä–µ–æ–ª–∞( –ø–æ –±–æ–∫–∞–º)  –µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º
                lineSplitSize2 = s.split(",");
                field_player[Integer.parseInt(lineSplitSize2[0])][Integer.parseInt(lineSplitSize2[1])] = "üõ•Ô∏è";
                field_player[Integer.parseInt(lineSplitSize2[0])][Integer.parseInt(lineSplitSize2[1]) + 1] = "\uD83D\uDFE9";
                field_player[Integer.parseInt(lineSplitSize2[0])][Integer.parseInt(lineSplitSize2[1]) - 1] = "\uD83D\uDFE9";
                count++;
            }
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –æ—Ä–µ–æ–ª–∞ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ –≤ –∫–æ–Ω—Ü–µ
            field_player[Integer.parseInt(lineSplitSize2[0]) + 1 ][Integer.parseInt(lineSplitSize2[1])] = "\uD83D\uDFE9";
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –û—Ä–µ–æ–ª–∞ –Ω–∞ –¥–≤—É—Ö –∫–ª–µ—Ç–∫–∞—Ö –Ω–∞–∏—Å–∫–æ—Å—å –≤ –∫–æ–Ω—Ü–µ
            field_player[Integer.parseInt(lineSplitSize2[0]) + 1 ][Integer.parseInt(lineSplitSize2[1]) + 1] = "\uD83D\uDFE9";
            field_player[Integer.parseInt(lineSplitSize2[0]) + 1 ][Integer.parseInt(lineSplitSize2[1]) - 1] = "\uD83D\uDFE9";
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –û—Ä–µ–æ–ª–∞ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ –≤ –Ω–∞—á–∞–ª–µ
            field_player[Integer.parseInt(lineSplitSize2[0]) - count][Integer.parseInt(lineSplitSize2[1])] = "\uD83D\uDFE9";
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –û—Ä–µ–æ–ª–∞ –Ω–∞ –¥–≤—É—Ö –∫–ª–µ—Ç–∫–∞—Ö –Ω–∞–∏—Å–∫–æ—Å—å –≤ –Ω–∞—á–∞–ª–µ
            field_player[Integer.parseInt(lineSplitSize2[0]) - count][Integer.parseInt(lineSplitSize2[1]) - 1] = "\uD83D\uDFE9";
            field_player[Integer.parseInt(lineSplitSize2[0]) - count][Integer.parseInt(lineSplitSize2[1]) + 1] = "\uD83D\uDFE9";
        } else {
            for (String s : lineSplitCount) {

                // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –∏ –µ–≥–æ –û—Ä–µ–æ–ª–∞(—Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É) –µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º
                lineSplitSize2 = s.split(",");
                field_player[Integer.parseInt(lineSplitSize2[0])][Integer.parseInt(lineSplitSize2[1])] = "üõ•Ô∏è";
                field_player[Integer.parseInt(lineSplitSize2[0]) + 1][Integer.parseInt(lineSplitSize2[1])] = "\uD83D\uDFE9";
                field_player[Integer.parseInt(lineSplitSize2[0]) - 1][Integer.parseInt(lineSplitSize2[1])] = "\uD83D\uDFE9";
                count++;
            }
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –æ—Ä–µ–æ–ª–∞ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ –≤ –∫–æ–Ω—Ü–µ
            field_player[Integer.parseInt(lineSplitSize2[0])][Integer.parseInt(lineSplitSize2[1]) + 1] = "\uD83D\uDFE9";
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –û—Ä–µ–æ–ª–∞ –Ω–∞ –¥–≤—É—Ö –∫–ª–µ—Ç–∫–∞—Ö –Ω–∞–∏—Å–∫–æ—Å—å –≤ –∫–æ–Ω—Ü–µ
            field_player[Integer.parseInt(lineSplitSize2[0])-1][Integer.parseInt(lineSplitSize2[1]) + 1] = "\uD83D\uDFE9";
            field_player[Integer.parseInt(lineSplitSize2[0])+1][Integer.parseInt(lineSplitSize2[1]) + 1] = "\uD83D\uDFE9";
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –û—Ä–µ–æ–ª–∞ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ –≤ –Ω–∞—á–∞–ª–µ
            field_player[Integer.parseInt(lineSplitSize2[0])][Integer.parseInt(lineSplitSize2[1]) - count] = "\uD83D\uDFE9";
            // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –û—Ä–µ–æ–ª–∞ –Ω–∞ –¥–≤—É—Ö –∫–ª–µ—Ç–∫–∞—Ö –Ω–∞–∏—Å–∫–æ—Å—å –≤ –Ω–∞—á–∞–ª–µ
            field_player[Integer.parseInt(lineSplitSize2[0]) - 1][Integer.parseInt(lineSplitSize2[1]) - count] = "\uD83D\uDFE9";
            field_player[Integer.parseInt(lineSplitSize2[0]) + 1][Integer.parseInt(lineSplitSize2[1]) - count] = "\uD83D\uDFE9";
        }
    }


    // –û–¥–Ω–∞ –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–π –∫–æ—Ä–∞–±–ª—è
    public static boolean validShip(int size){

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–≤—É—Ö–ø–∞–ª–æ–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
    if(size == 2) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å –∫–æ—Ä–∞–±–ª—è(—Ü–∏—Ñ—Ä—ã –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏)
           if((y1 != Utils.y2) && (x1 != x2)) {
               System.err.println("–¶–∏—Ñ—Ä—ã –æ–¥–Ω–æ–π –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å!");
               return false;
           }
           if(y1 - y2 == 1 || y2-y1 == 1) {
             return true;
           }
        if(x1 - x2 == 1 || x2-x1 == 1) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
    } if(size == 3) {

        /*
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω—ã –≤–µ—Ä–Ω–æ, –∫–æ—Ä–∞–±–ª—å —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è—Å—å –Ω–∞ —á–∞—Å—Ç–∏
        –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è false —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
         */
            if (y1 == y2 && y1 == y3) {
                if((x1 - x2 == 1 || x2 - x1 == 1) && (x1-x3 == 2 || x3-x1 == 2)) {
                    return true;
                }
            }
            if(x1 == x2 && x3 == x1) {
                if((y1 - y2 == 1 || y2 - y1 == 1) && (y1-y3 == 2 || y3-y1 == 2)) {
                    return true;
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
    if(size == 4) {
        if (y1 == y2 && y1 == y3) {
            if((x1 - x2 == 1 || x2 - x1 == 1) && (x1-x3 == 2 || x3-x1 == 2) && (x1-x4==3 || x4-x1 == 3)) {
                return true;
            }
        }
        if(x1 == x2 && x3 == x1) {
            if((y1 - y2 == 1 || y2 - y1 == 1) && (y1-y3 == 2 || y3-y1 == 2) && (y1-y4 == 3 || y4-y1 == 3)) {
                return true;
            }
        }
    }

    // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–π –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        System.err.println("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∫–æ—Ä–∞–±–ª—å –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è—Å—å");
        return false;
    }

    // –û–¥–Ω–∞ –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–π –∫–æ—Ä–∞–±–ª—è
    public static boolean validation(String [][]field_player,String line, int size){
        String Error = "–ù–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ —É–∂–µ —Å—Ç–æ–∏—Ç –∫–æ—Ä–∞–±–ª—å –∏–ª–∏ –∂–µ –≤—ã –∑–∞–¥–µ–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ä–∞–±–ª—è!";
            switch (size) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                case 1:
                    if (field_player[y1][x1].equals("üõ•Ô∏è") || field_player[y1][x1].equals("\uD83D\uDFE9")) {
                        System.err.println(Error);return false;}
                    return true;
                case 2:
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–ª—è–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å –û—Ä–µ–æ–ª —á—É–∂–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                    if(!Objects.equals(field_player[y1][x1], " ")) {System.err.println(Error);return false;}
                    if(!Objects.equals(field_player[y2][Utils.x2], " ")) {System.err.println(Error);return false;}

                    // –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è true
                    return true;

                case 3:
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–ª—è–µ—Ç –ª–∏ –Ω–æ–≤—ã–π —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å –û—Ä–µ–æ–ª —á—É–∂–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                    if(!Objects.equals(field_player[y1][x1], " ")) {System.err.println(Error);return false;}
                    if(!Objects.equals(field_player[y2][Utils.x2], " ")) {System.err.println(Error);return false;}
                    if(!Objects.equals(field_player[y3][x3], " ")) {System.err.println(Error);return false;}
                    return true;

                case 4:
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–ª—è–µ—Ç –ª–∏ –Ω–æ–≤—ã–π —á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å –û—Ä–µ–æ–ª —á—É–∂–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                    if(!Objects.equals(field_player[y1][x1], " ")) {System.err.println(Error);return false;}
                    if(!Objects.equals(field_player[y2][Utils.x2], " ")) {System.err.println(Error);return false;}
                    if(!Objects.equals(field_player[y3][x3], " ")) {System.err.println(Error);return false;}
                    if(!Objects.equals(field_player[y4][x4], " ")) {System.err.println(Error);return false;}
                default: return true;
            }
    }
}





